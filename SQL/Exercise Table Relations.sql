CREATE DATABASE [Exercises: Table Relations]

USE [Exercises: Table Relations]

--Problem 1. One-To-One Relationship
CREATE TABLE Persons (
	PersonID INT NOT NULL,
	FirstName VARCHAR(20) NOT NULL,
	Salary FLOAT(2) NOT NULL,
	PassportID INT NOT NULL
	)

CREATE TABLE Passports (
	PassportID INT NOT NULL,
	PassportNumber VARCHAR(50) NOT NULL
	)

ALTER TABLE Persons
ADD CONSTRAINT PK_PersonID
PRIMARY KEY (PersonID)

ALTER TABLE Passports
ADD CONSTRAINT PK_PassportID
PRIMARY KEY (PassportID)

ALTER TABLE Persons 
ADD CONSTRAINT FK_PassportID
FOREIGN KEY (PassportID)
REFERENCES Passports (PassportID)

--2. One-To-Many Relationship
CREATE TABLE Manufacturers (
	ManufacturerID INT PRIMARY KEY NOT NULL,
	Name VARCHAR(20) NOT NULL,
	EstablishedOn DATETIME2 NOT NULL
	)

CREATE TABLE Models (
	ModelID INT PRIMARY KEY NOT NULL,
	Name VARCHAR(20) NOT NULL,
	ManufacturerID INT FOREIGN KEY 
	REFERENCES Manufacturers (ManufacturerID) NOT NULL
	)

--3. Many-To-Many Relationship
CREATE TABLE Students (
	StudentID INT PRIMARY KEY NOT NULL,
	Name VARCHAR(20) NOT NULL
	)

CREATE TABLE Exams (
	ExamID INT PRIMARY KEY NOT NULL,
	Name VARCHAR(20) NOT NULL
	)

CREATE TABLE StudentsExams (
	StudentID INT FOREIGN KEY REFERENCES Students(StudentID)NOT NULL,
	ExamID INT FOREIGN KEY REFERENCES Exams(ExamID) NOT NULL,
	PRIMARY KEY (StudentID , ExamID)
	)

DROP TABLE StudentsExams
DROP TABLE Students

--4. Self-Referencing
CREATE TABLE Teachers (
	TeacherID INT PRIMARY KEY NOT NULL,
	Name VARCHAR(20) NOT NULL,
	ManagerID INT
	)

ALTER TABLE Teachers
ADD CONSTRAINT FK_ManagerID FOREIGN KEY (ManagerID) REFERENCES Teachers(TeacherID)

--5. Online Store Database
CREATE TABLE ItemTypes (
	ItemTypeID INT PRIMARY KEY NOT NULL,
	Name VARCHAR(50) NOT NULL
	)

CREATE TABLE Items (
	ItemID INT PRIMARY KEY NOT NULL,
	Name VARCHAR(50) NOT NULL,
	ItemTypeID INT FOREIGN KEY REFERENCES ItemTypes(ItemTypeID) NOT NULL
	)

CREATE TABLE Cities (
	CityID INT PRIMARY KEY NOT NULL,
	Name VARCHAR(50) NOT NULL
	)

CREATE TABLE Customers (
	CustomerID INT PRIMARY KEY NOT NULL,
	Name VARCHAR(50) NOT NULL,
	Birthday DATE NOT NULL,
	CityID INT FOREIGN KEY REFERENCES Cities(CityID) NOT NULL
	)

CREATE TABLE Orders (
	OrderID INT PRIMARY KEY NOT NULL,
	CustomerID INT FOREIGN KEY REFERENCES Customers(CustomerID) NOT NULL
	)

CREATE TABLE OrderItems (
	OrderID INT FOREIGN KEY REFERENCES Orders(OrderID) NOT NULL,
	ItemID INT FOREIGN KEY REFERENCES Items(ItemID) NOT NULL
	)

ALTER TABLE OrderItems
ADD CONSTRAINT PK_OrderID_ItemID
PRIMARY KEY (OrderID , ItemID)

DROP TABLE ItemTypes
DROP TABLE Items
DROP TABLE OrderItems
DROP TABLE Orders
DROP TABLE Customers
DROP TABLE Cities

--6. University Database
CREATE TABLE Subjects (
	SubjectID INT PRIMARY KEY NOT NULL,
	SubjectName VARCHAR(50) NOT NULL
	)

CREATE TABLE Majors (
	MajorID INT PRIMARY KEY NOT NULL,
	Name VARCHAR(50) NOT NULL
	)

CREATE TABLE Students (
	StudentID INT PRIMARY KEY NOT NULL,
	StudentNumber INT NOT NULL,
	StudentName VARCHAR(50) NOT NULL,
	MajorID INT FOREIGN KEY REFERENCES Majors(MajorID) NOT NULL
	)

CREATE TABLE Payments (
	PaymentID INT PRIMARY KEY NOT NULL,
	PaymentDate DATE NOT NULL,
	PaymentAmount FLOAT NOT NULL,
	StudentID INT FOREIGN KEY REFERENCES Students(StudentID) NOT NULL
	)

CREATE TABLE Agenda (
	StudentID INT FOREIGN KEY REFERENCES Students(StudentID) NOT NULL,
	SubjectID INT FOREIGN KEY REFERENCES Subjects(SubjectID) NOT NULL,
	PRIMARY KEY (StudentID , SubjectID)
	)

--9. *Peaks in Rila
USE Geography

SELECT m.MountainRange , p.PeakName , p.Elevation FROM Mountains AS m
JOIN Peaks AS p ON m.Id = p.MountainId
WHERE m.MountainRange = 'Rila'
ORDER BY p.Elevation DESC